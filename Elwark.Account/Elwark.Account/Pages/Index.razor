@page "/"
@using Elwark.Account.Service.Profile
@using Elwark.Account.Service.Profile.Models
@using Microsoft.AspNetCore.Authorization
@using Elwark.Account.Service

@inject IProfileClient Client
@inject ProfileStateProvider Provider
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Medium">
    <EditForm Model="@_model" OnValidSubmit="@OnSubmit">
        <FluentValidationValidator/>
        <div class="grid">
            <MudTextField Label="First name" @bind-Value="@_model.FirstName" For="@(() => _model.FirstName)"/>
            <MudTextField Label="Last name" @bind-Value="@_model.LastName" For="@(() => _model.LastName)"/>
            <MudTextField Label="Nickname" @bind-Value="@_model.Nickname" For="@(() => _model.Nickname)"/>
            <MudDatePicker Label="Birthday" @bind-Date="@_model.Birthday" MaxDate="@DateTime.UtcNow" For="@(() => _model.Birthday)"/>
            <MudSelect Label="Gender" @bind-Value="@_model.Gender" For="@(() => _model.Gender)">
                <MudSelectItem Value="@Gender.Male">Male</MudSelectItem>
                <MudSelectItem Value="@Gender.Female">Female</MudSelectItem>
            </MudSelect>
            <MudSelect Label="Language" @bind-Value="_model.Language" For="@(() => _model.Language)">
                <MudSelectItem Value="@("en")">English</MudSelectItem>
                <MudSelectItem Value="@("ru")">Русский</MudSelectItem>
            </MudSelect>

            <MudAutocomplete
                T="string"
                Label="Country"
                @bind-Value="@_model.CountryCode"
                For="@(() => _model.CountryCode)"
                SearchFunc="@CountrySearch"
                ToStringFunc="@(s => Infrastructure.Countries.TryGetValue(s, out var value) ? value : null)"
                ResetValueOnEmptyText="true"
                CoerceText="true">
                <ItemTemplate Context="country">
                    <MudText>
                        @(Infrastructure.Countries.TryGetValue(country, out var value) ? value : null)
                    </MudText>
                </ItemTemplate>
            </MudAutocomplete>

            <MudTextField Label="City" @bind-Value="@_model.CityName" For="@(() => _model.CityName)"/>
            <MudAutocomplete
                T="string"
                Label="Timezone"
                @bind-Value="@_model.Timezone"
                For="@(() => _model.Timezone)"
                SearchFunc="@TimezoneSearch"
                ResetValueOnEmptyText="true"
                CoerceText="true">
                <ItemTemplate Context="timezone">
                    <MudText>
                        @(Infrastructure.Timezones.TryGetValue(timezone, out var value) ? value : null)
                    </MudText>
                </ItemTemplate>
            </MudAutocomplete>

            <div class="two-column">
                <MudTextField Label="Bio" @bind-Value="_model.Bio" For="@(() => _model.Bio)" Lines="2"/>
            </div>
            <div class="two-column">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isUpdating">
                    @if (_isUpdating)
                    {
                        <div class="d-flex flex-row align-center">
                            <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                            Updating
                        </div>
                    }
                    else
                    {
                        @("Update")
                    }
                </MudButton>
            </div>
        </div>
    </EditForm>
</MudContainer>

@code
{
    [CascadingParameter]
    public Profile Profile { get; set; } = default!;

    [CascadingParameter]
    public InfrastructureState Infrastructure { get; set; } = default!;

    private UpdateProfile _model = default!;
    private bool _isUpdating;

    protected override void OnInitialized() =>
        _model = new UpdateProfile(Profile.FirstName, Profile.LastName, Profile.Nickname, Profile.Language, Profile.Gender,
            Profile.Birthday, Profile.Bio, Profile.Address.CountryCode, Profile.Address.CityName, Profile.Timezone.Name);

    private Task<IEnumerable<string>> CountrySearch(string? arg) =>
        Task.FromResult(Infrastructure.Countries
            .Where(x => x.Value.Contains(arg ?? string.Empty, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Key)
            );

    private Task<IEnumerable<string>> TimezoneSearch(string? arg) =>
        Task.FromResult(Infrastructure.Timezones
            .Where(x => x.Key.Contains(arg ?? string.Empty, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Key)
            );

    private async Task OnSubmit()
    {
        _isUpdating = true;
        var profile = await Client.UpdateAsync(_model);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add("Something went wrong", Severity.Error);
                break;

            case ResponseStatus.Success:
                Provider.Update(profile.Data);
                Snackbar.Add("Account updated", Severity.Success);
                break;
        }

        _isUpdating = false;
    }
}