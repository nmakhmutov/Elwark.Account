@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@using System.Net
@using Elwark.Account.Gateways
@using Elwark.Account.Gateways.Country
@using Elwark.Account.Gateways.Profile
@using Elwark.Account.Gateways.Profile.Models
@using Elwark.Account.Gateways.Profile.Requests
@using Elwark.Account.Gateways.Timezone
@using Elwark.Account.Features.Profile.Components

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="my-3 my-sm-6">
    <ApiViewer Response="@_response">
        <Loading>
            <MudSkeleton/>
        </Loading>
        <Success Context="profile">
            <MudPaper Class="pa-3 pa-sm-6 mb-3 mb-sm-6">
                <ProfileEditor
                    Model="@_model"
                    Timezones="@_timezones"
                    Countries="@_countries"
                    OnUpdate="@UpdateProfileAsync"/>
            </MudPaper>

            <section class="mb-3 mb-sm-6">
                <MudText Typo="Typo.h5" Class="mb-3">
                    @L["Connections"]
                </MudText>
                <MudGrid Spacing="3">
                    @foreach (var connection in profile.Connections)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            @switch (connection)
                            {
                                case EmailConnection email:
                                    <EmailCard
                                        Email="@email"
                                        OnDelete="@DeleteConnectionAsync"
                                        OnSetPrimary="@SetEmailAsPrimaryAsync"
                                        OnConfirming="@ConfirmingEmailAsync"
                                        OnConfirm="@ConfirmEmailAsync"/>
                                    break;

                                case SocialConnection social:
                                    <SocialCard Connection="@social" OnDelete="@DeleteConnectionAsync"/>
                                    break;

                                default:
                                    throw new ArgumentOutOfRangeException(nameof(connection));
                            }
                        </MudItem>
                    }
                    <MudItem xs="12" sm="6" md="4">
                        <a href="@_addLink">
                            <MudPaper Class="pa-3 pa-sm-6">
                                <div class="d-flex flex-column justify-center align-center my-4">
                                    <MudIcon Icon="@Icons.Outlined.Add" Size="Size.Large" Color="Color.Primary"/>
                                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                        @L["AddConnection"]
                                    </MudText>
                                </div>
                            </MudPaper>
                        </a>
                    </MudItem>
                </MudGrid>
            </section>
            
            <section class="mb-3 mb-sm-6">
                <MudText Typo="Typo.h5" Class="mb-3">
                    @L["Security"]
                </MudText>
                <MudPaper Class="pa-3 pa-sm-6" Style="max-width: 608px">
                    @if (profile.IsPasswordAvailable)
                    {
                        <PasswordUpdateEditor OnUpdatePassword="@UpdatePasswordAsync"/>
                    }
                    else
                    {
                        <PasswordCreateEditor
                            OnSendConfirmation="@SendPasswordConfirmationAsync"
                            OnCreatePassword="@CreatePasswordAsync"/>
                    }
                </MudPaper>
            </section>
            
        </Success>
    </ApiViewer>
</MudContainer>

@code
{
    private ProfileEditorModel _model = default!;
    private ApiResponse<Profile> _response = ApiResponse<Profile>.Loading();
    private Timezone[] _timezones = Array.Empty<Timezone>();
    private Country[] _countries = Array.Empty<Country>();
    private string _addLink = string.Empty;

    [Inject]
    private IProfileClient ProfileClient { get; set; } = default!;

    [Inject]
    private ITimezoneClient TimezoneClient { get; set; } = default!;

    [Inject]
    private ICountryClient CountryClient { get; set; } = default!;

    [Inject]
    private IConfiguration Configuration { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    IDialogService DialogService { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var returnUrl = WebUtility.UrlEncode(Navigation.ToAbsoluteUri(Navigation.Uri).ToString());
        _addLink = new Uri(new Uri(Configuration["OpenIdConnect:Authority"]), $"attach?returnUrl={returnUrl}")
            .ToString();

        _response = await ProfileClient.GetAsync();

        if (_response.IsSuccess)
            _model = ToEditorModel(_response.Data);

        var timezones = await TimezoneClient.GetAsync();
        if (timezones.IsSuccess)
            _timezones = timezones.Data;

        var countries = await CountryClient.GetAsync();
        if (countries.IsSuccess)
            _countries = countries.Data;
    }

    private async Task UpdateProfileAsync(ProfileEditorModel model)
    {
        var request = new UpdateProfileRequest(
            model.FirstName,
            model.LastName,
            model.Nickname,
            model.PreferNickname,
            model.Language,
            model.CountryCode,
            model.Timezone,
            model.FirstDayOfWeek
            );

        var response = await ProfileClient.UpdateAsync(request);
        if (_response.IsSuccess)
        {
            _response = response;
            _model = ToEditorModel(response.Data);
            Snackbar.Add(L["AccountUpdated"], Severity.Success);
        }
        else
        {
            Snackbar.Add(_response.Error.Message, Severity.Error);
        }
    }

    private static ProfileEditorModel ToEditorModel(Profile profile) =>
        new(
            profile.FirstName,
            profile.LastName,
            profile.Nickname,
            profile.PreferNickname,
            profile.Language,
            profile.CountryCode,
            profile.TimeZone,
            profile.FirstDayOfWeek,
            profile.Picture,
            profile.FullName,
            profile.CreatedAt
            );

    private async Task DeleteConnectionAsync(Connection connection)
    {
        var (type, value, _) = connection;
        var result = await DialogService.ShowMessageBox(
            new MessageBoxOptions
            {
                Message = L["AreYouSureYouWantToDeleteYourConnection", type.ToString(), value],
                Title = L["Warning"],
                YesText = L["Delete"],
                NoText = L["No"]
            });

        if (result != true)
            return;

        _response = await ProfileClient.DeleteAsync(type, value);
    }

    private async Task<string?> ConfirmingEmailAsync(EmailConnection email)
    {
        var response = await ProfileClient.SendConfirmationAsync(email.IdentityType, email.Value);
        if (response.IsSuccess)
        {
            Snackbar.Add(L["ConfirmationCodeSent"], Severity.Info);
            return response.Data.Id;
        }

        Snackbar.Add(response.Error.Message, Severity.Error);
        return null;
    }
    
    private async Task ConfirmEmailAsync(EmailCard.ConfirmationModel model)
    {
        var request = new ConfirmRequest(model.Id, model.Code!.Value);
        var response = await ProfileClient.ConfirmAsync(model.Email.IdentityType, model.Email.Value, request);
        
        if (response.IsSuccess)
            _response = response;
        else
            Snackbar.Add(response.Error.Message, Severity.Error);
    }
    
    private async Task SetEmailAsPrimaryAsync(EmailConnection email)
    {
        _response = await ProfileClient.SetAsPrimaryAsync(email.Value);
    }

    private async Task UpdatePasswordAsync(PasswordUpdateEditorModel model)
    {
        var request = new UpdatePasswordRequest(model.OldPassword!, model.NewPassword!, model.ConfirmNewPassword!);
        var response = await ProfileClient.UpdatePasswordAsync(request);
        
        if (response.IsSuccess)
            Snackbar.Add(L["AccountUpdated"], Severity.Success);
        else
            Snackbar.Add(response.Error.Message, Severity.Error);
    }

    private async Task<string> SendPasswordConfirmationAsync()
    {
        var response = await ProfileClient.CreatingPasswordAsync();
        if(response.IsSuccess)
            return response.Data.Id;

        Snackbar.Add(response.Error.Message, Severity.Error);
        return string.Empty;
    }

    private async Task CreatePasswordAsync(PasswordCreateEditorModel model)
    {
        var request = new CreatePasswordRequest(model.Id, model.Code!.Value, model.Password!, model.ConfirmPassword!);
        var response = await ProfileClient.CreatePasswordAsync(request);
        
        if (response.IsSuccess)
            _response = response;
        else
            Snackbar.Add(response.Error.Message, Severity.Error);
    }
}
