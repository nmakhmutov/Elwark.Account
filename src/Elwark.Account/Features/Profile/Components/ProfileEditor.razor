@using Elwark.Account.Gateways.Timezone
@using Elwark.Account.Gateways.Country
@using System.Globalization

<MudGrid Spacing="3">
    <MudItem xs="12" md="4" lg="3">
        <div class="d-flex justify-center mb-3 mb-sm-6">
            <MudAvatar Image="@Model.Picture" Class="avatar" Variant="Variant.Filled"/>
        </div>
        <MudText Typo="Typo.h6" Align="Align.Center">
            @Model.FullName
        </MudText>
        <MudText Typo="Typo.body2" Align="Align.Center" Class="mud-text-secondary">
            @L["MemberSince", Model.CreatedAt.ToShortDateString()]
        </MudText>
    </MudItem>
    <MudItem xs="12" md="8" lg="9">
        <EditForm Model="@Model" OnValidSubmit="@OnSubmit">
            <FluentValidationValidator/>

            <MudGrid Spacing="3">
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="@L["Nickname"]" @bind-Value="@Model.Nickname" For="@(() => Model.Nickname)"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="@L["FirstName"]" @bind-Value="@Model.FirstName" For="@(() => Model.FirstName)"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="@L["LastName"]" @bind-Value="@Model.LastName" For="@(() => Model.LastName)"/>
                </MudItem>
                <MudItem xs="12">
                    <MudCheckBox Label="@L["PreferNickname"]" @bind-Checked="@Model.PreferNickname" Dense="true" Color="Color.Primary"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete
                        Label="@L["Country"]"
                        @bind-Value="@Model.CountryCode"
                        For="@(() => Model.CountryCode)"
                        SearchFunc="@CountrySearch"
                        ToStringFunc="@(code => GetCountryName(code))"
                        ResetValueOnEmptyText
                        Clearable
                        CoerceText>
                        <ItemTemplate Context="code">
                            <MudText>
                                @GetCountryName(code)
                            </MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudAutocomplete
                        T="string"
                        Label="@L["Timezone"]"
                        @bind-Value="@Model.Timezone"
                        For="@(() => Model.Timezone)"
                        SearchFunc="@TimezoneSearch"
                        ResetValueOnEmptyText
                        Clearable
                        CoerceText>
                        <ItemTemplate Context="timezone">
                            <MudText>
                                @GetTimeZoneName(timezone)
                            </MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect Label="@L["PreferredLanguage"]" @bind-Value="Model.Language" For="@(() => Model.Language)">
                        <MudSelectItem Value="@("en")">English</MudSelectItem>
                        <MudSelectItem Value="@("ru")">Русский</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect Label="@L["WeekStart"]" @bind-Value="Model.WeekStart" For="@(() => Model.WeekStart)">
                        @foreach (var day in Enum.GetValues<DayOfWeek>())
                        {
                            <MudSelectItem Value="@day">@L[$"DayOfWeek:{day}"]</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect Label="@L["DateFormat"]" @bind-Value="Model.DateFormat" For="@(() => Model.DateFormat)">
                        @foreach (var format in DateFormats)
                        {
                            <MudSelectItem Value="@format">
                                @_templateDate.ToString(format)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect Label="@L["TimeFormat"]" @bind-Value="Model.TimeFormat" For="@(() => Model.TimeFormat)">
                        @foreach (var format in TimeFormats)
                        {
                            <MudSelectItem Value="@format">
                                @_templateDate.ToString(format)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-end">
                    <LoadingButton
                        ButtonType="ButtonType.Submit"
                        Text="@L["Update"]"
                        LoadingText="@L["Loading"]"
                        IsLoading="@_isLoading"/>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private bool _isLoading;
    private DateTime _templateDate = new(2001, 8, 31, 13, 0, 0);

    private static readonly string[] DateFormats =
    {
        "M/d/yy",
        "MM/dd/yy",
        "dd/MM/yy",
        "dd-MM-yy",
        "MM-dd-yy",
        "M/d/yyyy",
        "MM/dd/yyyy",
        "dd/MM/yyyy",
        "dd-MM-yyyy",
        "MM-dd-yyyy",
        "yyyy-MM-dd"
    };

    private static readonly string[] TimeFormats =
    {
        "HH:mm",
        "h:mm tt",
        "hh:mm tt"
    };

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter, EditorRequired]
    public AccountEditorModel Model { get; set; } = default!;

    [Parameter, EditorRequired]
    public Timezone[] Timezones { get; set; } = default!;

    [Parameter, EditorRequired]
    public Country[] Countries { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<AccountEditorModel> OnUpdate { get; set; }

    private Task<IEnumerable<string?>> CountrySearch(string? arg)
    {
        if (string.IsNullOrEmpty(arg))
            return Task.FromResult<IEnumerable<string?>>(Countries.Select(x => x.Code));

        var result = Countries
            .Where(x => x.ToString().Contains(arg, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Code);

        return Task.FromResult<IEnumerable<string?>>(result);
    }

    private Task<IEnumerable<string>> TimezoneSearch(string? arg)
    {
        if (string.IsNullOrEmpty(arg))
            return Task.FromResult(Timezones.Select(x => x.Name));

        var result = Timezones
            .Where(x => x.ToString().Contains(arg, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Name);

        return Task.FromResult(result);
    }

    private string GetCountryName(string? code) =>
        string.IsNullOrEmpty(code)
            ? string.Empty
            : Countries.FirstOrDefault(x => x.Code == code)?.ToString() ?? string.Empty;

    private string GetTimeZoneName(string name) =>
        Timezones.FirstOrDefault(x => x.Name == name)?.ToString() ?? string.Empty;

    private async Task OnSubmit()
    {
        _isLoading = true;
        await OnUpdate.InvokeAsync(Model);
        _isLoading = false;
    }

}
