<EditForm Model="@_model" OnValidSubmit="@OnSubmit">
    <FluentValidationValidator/>
    
    <MudGrid Spacing="1">
        <MudItem xs="12">
            <MudTextField
                InputType="InputType.Password"
                Label="@L["OldPassword"]"
                @bind-Value="@_model.OldPassword"
                For="@(() => _model.OldPassword)"/>
        </MudItem>
        <MudItem xs="12" lg="6">
            <MudTextField
                InputType="InputType.Password"
                Label="@L["NewPassword"]"
                @bind-Value="@_model.NewPassword"
                For="@(() => _model.NewPassword)"/>
        </MudItem>
        <MudItem xs="12" lg="6">
            <MudTextField
                InputType="InputType.Password"
                Label="@L["ConfirmPassword"]"
                @bind-Value="@_model.ConfirmNewPassword"
                For="@(() => _model.ConfirmNewPassword)"/>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-end mt-3">
            <LoadingButton
                ButtonType="ButtonType.Submit"
                Text="@L["Update"]"
                LoadingText="@L["Loading"]"
                IsLoading="@_isLoading"/>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private bool _isLoading;
    private PasswordUpdateEditorModel _model = new();

    [Inject]
    IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public EventCallback<PasswordUpdateEditorModel> OnUpdatePassword { get; set; }

    private async Task OnSubmit()
    {
        _isLoading = true;
        await OnUpdatePassword.InvokeAsync(_model);
        _model = new PasswordUpdateEditorModel();
        _isLoading = false;
    }

}
