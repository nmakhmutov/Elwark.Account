@if (_isConfirmationSent)
{
    <EditForm Model="@_model" OnValidSubmit="@OnSubmit">
        <FluentValidationValidator/>
        <MudTextField Label="@L["ConfirmationCode"]" @bind-Value="@_model.Code" For="@(() => _model.Code)"/>
        <MudTextField InputType="InputType.Password" Label="@L["Password"]" @bind-Value="@_model.Password" For="@(() => _model.Password)"/>
        <MudTextField InputType="InputType.Password" Label="@L["ConfirmPassword"]" @bind-Value="@_model.ConfirmPassword" For="@(() => _model.ConfirmPassword)"/>

        <LoadingButton
            ButtonType="ButtonType.Submit"
            Class="mt-3"
            Text="@L["Create"]"
            LoadingText="@L["Loading"]"
            IsLoading="@_isUpdating"/>
    </EditForm>
}
else
{
    <MudText Typo="Typo.body1">
        Your account don't have a password. It means that you can't sign in with your email and password.
    </MudText>
    <MudButton
        Variant="Variant.Filled"
        Color="Color.Primary"
        Class="mt-3"
        OnClick="SendConfirmation"
        Disabled="@_isUpdating">
        @if (_isUpdating)
        {
            <div class="d-flex flex-row align-center">
                <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                @L["Loading"]
            </div>
        }
        else
        {
            @L["Create"]
        }
    </MudButton>
}

@code {
    private bool _isConfirmationSent;
    private bool _isUpdating;

    private PasswordCreateEditorModel _model = new(string.Empty);

    [Inject]
    IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public Func<Task<string>> OnSendConfirmation { get; set; } = default!;

    [Parameter]
    public EventCallback<PasswordCreateEditorModel> OnCreatePassword { get; set; }

    private async Task SendConfirmation()
    {
        _isUpdating = true;
        var id = await OnSendConfirmation.Invoke();
        if (!string.IsNullOrEmpty(id))
        {
            _model = new PasswordCreateEditorModel(id);
            _isConfirmationSent = true;
        }
        _isUpdating = false;
    }

    private async Task OnSubmit()
    {
        await OnCreatePassword.InvokeAsync(_model);
    }

}
