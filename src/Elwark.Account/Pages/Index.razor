@page "/"
@using Elwark.Account.Service.Profile
@using Elwark.Account.Service.Profile.Models
@using Microsoft.AspNetCore.Authorization
@using Elwark.Account.Service
@using Elwark.Account.Service.Profile.Requests
@using Elwark.Account.States

@inject IProfileClient Client
@inject ProfileStateProvider Provider
@inject ISnackbar Snackbar
@inject IStringLocalizer<App> L

@attribute [Authorize]

<EditForm Model="@_model" OnValidSubmit="@OnSubmit">
    <FluentValidationValidator/>
    <div class="grid">
        <MudTextField Label="@L["FirstName"]" @bind-Value="@_model.FirstName" For="@(() => _model.FirstName)"/>
        <MudTextField Label="@L["LastName"]" @bind-Value="@_model.LastName" For="@(() => _model.LastName)"/>
        <MudTextField Label="@L["Nickname"]" @bind-Value="@_model.Nickname" For="@(() => _model.Nickname)"/>
        <MudDatePicker Label="@L["DateOfBirth"]" @bind-Date="@_model.DateOfBirth" MaxDate="@DateTime.UtcNow" For="@(() => _model.DateOfBirth)"/>
        <MudSelect Label="@L["Gender"]" @bind-Value="@_model.Gender" For="@(() => _model.Gender)">
            <MudSelectItem Value="@Gender.Male">@L["Male"]</MudSelectItem>
            <MudSelectItem Value="@Gender.Female">@L["Female"]</MudSelectItem>
        </MudSelect>
        <MudSelect Label="@L["Language"]" @bind-Value="_model.Language" For="@(() => _model.Language)">
            <MudSelectItem Value="@("en")">English</MudSelectItem>
            <MudSelectItem Value="@("ru")">Русский</MudSelectItem>
        </MudSelect>

        <MudAutocomplete
            T="string"
            Label="@L["Country"]"
            @bind-Value="@_model.CountryCode"
            For="@(() => _model.CountryCode)"
            SearchFunc="@CountrySearch"
            ToStringFunc="@(s => Infrastructure.Countries.FirstOrDefault(x => x.Code == s)?.Name)"
            ResetValueOnEmptyText="true"
            CoerceText="true">
            <ItemTemplate Context="country">
                <MudText>
                    @(Infrastructure.Countries.FirstOrDefault(x => x.Code == country))
                </MudText>
            </ItemTemplate>
        </MudAutocomplete>

        <MudTextField Label="@L["City"]" @bind-Value="@_model.CityName" For="@(() => _model.CityName)"/>

        <MudAutocomplete
            T="string"
            Label="@L["Timezone"]"
            @bind-Value="@_model.Timezone"
            For="@(() => _model.Timezone)"
            SearchFunc="@TimezoneSearch"
            ResetValueOnEmptyText="true"
            CoerceText="true">
            <ItemTemplate Context="timezone">
                <MudText>
                    @(Infrastructure.Timezones.FirstOrDefault(x => x.Name == timezone))
                </MudText>
            </ItemTemplate>
        </MudAutocomplete>

        <div class="two-column">
            <MudTextField Label="@L["Bio"]" @bind-Value="_model.Bio" For="@(() => _model.Bio)" Lines="2"/>
        </div>
        <div class="two-column">
            <LoadingButton Text="@L["Update"]" IsLoading="@_isUpdating"/>
        </div>
    </div>
</EditForm>

@code
{
    [CascadingParameter]
    public Profile Profile { get; set; } = default!;

    [CascadingParameter]
    public InfrastructureState Infrastructure { get; set; } = default!;

    private UpdateProfile _model = default!;
    private bool _isUpdating;

    protected override void OnInitialized() =>
        _model = new UpdateProfile(
            Profile.FirstName,
            Profile.LastName,
            Profile.Nickname,
            Profile.Language,
            Profile.Gender,
            Profile.DateOfBirth,
            Profile.Bio,
            Profile.Address.CountryCode,
            Profile.Address.CityName,
            Profile.Timezone.Name
            );

    private Task<IEnumerable<string>> CountrySearch(string? arg)
    {
        if (string.IsNullOrEmpty(arg))
            return Task.FromResult(Enumerable.Empty<string>());

        var result = Infrastructure.Countries
            .Where(x => x.ToString().Contains(arg, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Code);

        return Task.FromResult(result);
    }

    private Task<IEnumerable<string>> TimezoneSearch(string? arg)
    {
        if (string.IsNullOrEmpty(arg))
            return Task.FromResult(Enumerable.Empty<string>());

        var result = Infrastructure.Timezones
            .Where(x => x.ToString().Contains(arg, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Name);

        return Task.FromResult(result);
    }

    private async Task OnSubmit()
    {
        _isUpdating = true;
        var profile = await Client.UpdateAsync(_model);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add("Something went wrong", Severity.Error);
                break;

            case ResponseStatus.Success:
                Provider.Update(profile.Data);
                Snackbar.Add(L["AccountUpdated"], Severity.Success);
                break;
        }

        _isUpdating = false;
    }
}
