@page "/identities"
@using Microsoft.AspNetCore.Authorization
@using Elwark.Account.Service.Profile.Models
@using Elwark.Account.Service.Profile
@using Elwark.Account.Service
@using Elwark.Account.Service.Profile.Requests
@using Microsoft.Extensions.Configuration
@using System.Net
@using Elwark.Account.States

@inject IDialogService DialogService
@inject ProfileStateProvider Provider
@inject IProfileClient Client
@inject ISnackbar Snackbar
@inject IStringLocalizer<App> L
@inject IConfiguration Configuration
@inject NavigationManager Navigation

@attribute [Authorize]

<div class="mb-3">
    <MudButton Link="@_addLink" Variant="Variant.Outlined" Color="Color.Primary">
        @L["Add"]
    </MudButton>
</div>
<div class="grid">
    @foreach (var identity in Profile.Identities)
    {
        switch (identity)
        {
            case EmailIdentity x:
                <EmailIdentityCard
                    Email="@x"
                    OnDelete="@OnDeleteClick"
                    OnConfirmation="@OnRequestConfirmationClick"
                    OnEmailTypeChange="@OnEmailTypeChanged"/>
                break;

            case SocialIdentity x:
                <SocialIdentityCard Identity="@x" OnDelete="@OnDeleteClick"/>
                break;
        }
    }
</div>

@code {

    [CascadingParameter]
    public Profile Profile { get; set; } = default!;

    private string _addLink = string.Empty;

    protected override void OnInitialized()
    {
        var host = new Uri(Configuration["OpenIdConnect:Authority"]);
        var returnUrl = WebUtility.UrlEncode(Navigation.ToAbsoluteUri(Navigation.Uri).ToString());
        _addLink = new Uri(host, $"attach?returnUrl={returnUrl}").ToString();
    }

    private async Task OnDeleteClick(Identity identity)
    {
        var result = await DialogService.ShowMessageBox(
            new MessageBoxOptions
            {
                Message = L["AreYouSureYouWantToDeleteYourIdentity", identity.IdentityType.ToString().ToLowerInvariant(), identity.Value],
                Title = L["Warning"],
                YesText = L["Delete"],
                NoText = L["No"]
            });

        if (result != true)
            return;

        var profile = await Client.DeleteIdentityAsync(identity.IdentityType, identity.Value);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add("Something went wrong", Severity.Error);
                break;

            case ResponseStatus.Success:
                Provider.Update(profile.Data);
                Snackbar.Add(L["AccountUpdated"], Severity.Success);
                break;
        }
    }

    private async Task OnRequestConfirmationClick(Identity identity)
    {
        var profile = await Client.ConfirmingIdentityAsync(identity.IdentityType, identity.Value);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add($"Something went wrong. {profile.Error.Title}", Severity.Error);
                break;

            case ResponseStatus.Success:
                Snackbar.Add($"Confirmation code sent to {identity.Value}", Severity.Success);
                DialogService.Show<IdentityConfirmationDialog>(
                    string.Empty,
                    new DialogParameters
                    {
                        [nameof(Identity)] = identity,
                        [nameof(Confirming)] = profile.Data
                    },
                    new DialogOptions
                    {
                        CloseButton = false,
                        NoHeader = true,
                        DisableBackdropClick = true,
                        FullWidth = true,
                        MaxWidth = MaxWidth.ExtraSmall
                    });
                break;
        }
    }

    private async Task OnEmailTypeChanged(ChangeEmailType request)
    {
        var profile = await Client.ChangeEmailType(request);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add($"Something went wrong. {profile.Error.Title}", Severity.Error);
                break;

            case ResponseStatus.Success:
                Provider.Update(profile.Data);
                Snackbar.Add(L["AccountUpdated"], Severity.Success);
                break;
        }
    }

}