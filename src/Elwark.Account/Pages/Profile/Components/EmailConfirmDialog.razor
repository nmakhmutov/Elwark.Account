@using Microsoft.AspNetCore.Components
@using FluentValidation
@using Elwark.Account.Gateways.Profile
@using Elwark.Account.Gateways.Profile.Requests
<MudDialog Class="pa-3 pa-sm-6">
    <DialogContent>
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3 mb-sm-6">
            @L["Email:AddNew"]
        </MudText>
        <EditForm Model="@_model" OnSubmit="@OnSubmit">
            <FluentValidationValidator/>

            <MudTextField
                Label="@L["Code"]"
                InputType="InputType.Number"
                Clearable
                Error="@(!string.IsNullOrEmpty(_error))"
                ErrorText="@_error"
                Variant="Variant.Outlined"
                @bind-Value="@_model.Code"
                For="@(() => _model.Code)"/>

            <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Class="mt-3 mt-sm-6">
                <LoadingButton
                    IsLoading="@_isLoading"
                    Text="@L["Email:Add"]"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    ButtonType="ButtonType.Submit"
                    DisableElevation/>

                <MudButton OnClick="OnCancel" DisableElevation>
                    @L["Account:Cancel"]
                </MudButton>
            </MudStack>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    private bool _isLoading;
    private string? _error;
    private readonly Model _model = new();
    
    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IAccountClient Client { get; set; } = default!;

    [Inject]
    private AccountStateProvider Provider { get; set; } = default!;
    
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter, EditorRequired]
    public string Token { get; set; } = string.Empty;
    
    private async Task OnSubmit(EditContext context)
    {
        _error = null;
        var isValid = context.Validate();
        if (!isValid)
            return;

        _isLoading = true;

        var result = await Client.ConfirmEmailAsync(new ConfirmRequest(Token, _model.Code.GetValueOrDefault()));

        _isLoading = false;

        if (result.IsSuccess)
        {
            Provider.Update(result.Data);
            MudDialog.Close();

            return;
        }

        _error = result.Error.Detail;
    }
    
    private void OnCancel() =>
        MudDialog.Cancel();
    
    public sealed class Model
    {
        public int? Code { get; set; }

        public sealed class Validator : AbstractValidator<Model>
        {
            public Validator(IStringLocalizer<App> l)
            {
                RuleFor(x => x.Code)
                    .NotEmpty()
                    .GreaterThanOrEqualTo(1000)
                    .WithName(l["Code"]);
            }
        }
    }
}
