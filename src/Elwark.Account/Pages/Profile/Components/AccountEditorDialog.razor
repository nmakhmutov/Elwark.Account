@using Elwark.Account.Gateways.Profile
@using Elwark.Account.Gateways.Profile.Requests
@using Elwark.Account.Gateways.Timezone
@using Elwark.Account.Gateways.Country
<MudDialog Class="pa-3 pa-sm-6">
    <DialogContent>
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3 mb-sm-6">
            @L["Account:EditUserInformation"]
        </MudText>
        <EditForm Model="@_model" OnValidSubmit="@OnSubmit">
            <FluentValidationValidator/>

            <MudGrid Spacing="3">
                <MudItem xs="12" md="6">
                    <MudTextField
                        Label="@L["Nickname"]"
                        Variant="Variant.Outlined"
                        @bind-Value="@_model.Nickname"
                        For="@(() => _model.Nickname)"/>
                </MudItem>
                <MudItem xs="12" md="6" Class="d-flex">
                    <MudCheckBox
                        Label="@L["PreferNickname"]"
                        @bind-Checked="@_model.PreferNickname"
                        Color="Color.Primary"
                        Dense/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField
                        Label="@L["FirstName"]"
                        Variant="Variant.Outlined"
                        @bind-Value="@_model.FirstName"
                        For="@(() => _model.FirstName)"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField
                        Label="@L["LastName"]"
                        Variant="Variant.Outlined"
                        @bind-Value="@_model.LastName"
                        For="@(() => _model.LastName)"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect
                        Label="@L["Country"]"
                        Variant="Variant.Outlined"
                        @bind-Value="@_model.CountryCode"
                        For="@(() => _model.CountryCode)">
                        @foreach (var country in Countries)
                        {
                            <MudSelectItem Value="@country.Code">
                                <MudImage Alt="@country.Name" Src="@country.Flag" Width="26" Height="15" Class="mr-1"/>
                                @country.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudAutocomplete
                        T="string"
                        Clearable
                        Label="@L["TimeZone"]"
                        Variant="Variant.Outlined"
                        @bind-Value="@_model.TimeZone"
                        For="@(() => _model.TimeZone)"
                        SearchFunc="@TimeZoneSearch"
                        ResetValueOnEmptyText
                        CoerceText>
                        <ItemTemplate Context="timeZone">
                            <MudText>
                                @GetTimeZoneName(timeZone)
                            </MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Label="@L["PreferredLanguage"]" Variant="Variant.Outlined" @bind-Value="_model.Language" For="@(() => _model.Language)">
                        @foreach (var language in StaticData.Languages)
                        {
                            <MudSelectItem Value="@language.Key">
                                @language.Value
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Label="@L["StartOfWeek"]" Variant="Variant.Outlined" @bind-Value="_model.StartOfWeek" For="@(() => _model.StartOfWeek)">
                        @foreach (var day in StaticData.DayOfWeeks)
                        {
                            <MudSelectItem Value="@day">
                                @L[$"DayOfWeek:{day}"]
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Label="@L["DateFormat"]" Variant="Variant.Outlined" @bind-Value="_model.DateFormat" For="@(() => _model.DateFormat)">
                        @foreach (var format in StaticData.DateFormats)
                        {
                            <MudSelectItem Value="@format">
                                @_templateDate.ToString(format) (@format)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Label="@L["TimeFormat"]" Variant="Variant.Outlined" @bind-Value="_model.TimeFormat" For="@(() => _model.TimeFormat)">
                        @foreach (var format in StaticData.TimeFormats)
                        {
                            <MudSelectItem Value="@format">
                                @_templateDate.ToString(format) (@format)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <LoadingButton
                            DisableElevation
                            IsLoading="@_isLoading"
                            Text="@L["Account:Update"]"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            ButtonType="ButtonType.Submit"/>

                        <MudButton OnClick="OnCancel" DisableElevation>
                            @L["Account:Cancel"]
                        </MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    private bool _isLoading;
    private AccountEditorModel _model = default!;
    private readonly DateTime _templateDate = new(2001, 8, 31, 13, 30, 0);

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IAccountClient Client { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private AccountStateProvider Provider { get; set; } = default!;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter, EditorRequired]
    public Timezone[] Timezones { get; set; } = Array.Empty<Timezone>();

    [Parameter, EditorRequired]
    public Country[] Countries { get; set; } = Array.Empty<Country>();

    protected override void OnParametersSet()
    {
        var state = Provider.GetAccount();
        _model = new AccountEditorModel
        {
            Nickname = state.Nickname,
            FirstName = state.FirstName,
            LastName = state.LastName,
            PreferNickname = state.PreferNickname,
            Language = state.Language,
            CountryCode = state.CountryCode,
            DateFormat = state.DateFormat,
            TimeFormat = state.TimeFormat,
            TimeZone = state.TimeZone,
            StartOfWeek = state.StartOfWeek
        };
    }

    private async Task OnSubmit()
    {
        _isLoading = true;
        var request = new UpdateProfileRequest(
            _model.Nickname,
            _model.FirstName,
            _model.LastName,
            _model.PreferNickname,
            _model.Language,
            _model.CountryCode,
            _model.TimeZone,
            _model.DateFormat,
            _model.TimeFormat,
            _model.StartOfWeek
            );

        var result = await Client.UpdateAsync(request);
        _isLoading = false;

        if (result.IsSuccess)
        {
            Provider.Update(result.Data);

            Snackbar.Add(L["Account:Updated"], Severity.Success);
            MudDialog.Close();
        }
        else
        {
            Snackbar.Add(result.Error.Detail, Severity.Error);
        }
    }

    private void OnCancel() =>
        MudDialog.Cancel();

    private Task<IEnumerable<string>> TimeZoneSearch(string? arg)
    {
        if (string.IsNullOrEmpty(arg))
            return Task.FromResult(Timezones.Select(x => x.Id));

        var result = Timezones
            .Where(x => x.ToString().Contains(arg, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Id);

        return Task.FromResult(result);
    }

    private string GetTimeZoneName(string id) =>
        Timezones.FirstOrDefault(x => x.Id == id)?.ToString() ?? string.Empty;

}
