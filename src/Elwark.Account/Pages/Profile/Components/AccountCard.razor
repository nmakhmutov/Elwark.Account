@using Elwark.Account.Gateways.Country
@using Elwark.Account.Gateways.Timezone

<MudPaper Class="pa-3 pa-sm-6" Elevation="0">
    <MudStack Class="mb-3" Row Justify="Justify.Center">
        <MudImage
            Class="rounded"
            Src="@Account.Picture"
            Alt="@Account.FullName"
            Width="120"
            Height="120"
            ObjectPosition="ObjectPosition.Center"
            ObjectFit="ObjectFit.Cover"/>
    </MudStack>

    <MudText Class="text-normal" Typo="Typo.h5" Align="Align.Center">
        @Account.FullName
    </MudText>

    <MudText Class="mud-text-secondary mb-6" Typo="Typo.body2" Align="Align.Center">
        @L["Account:MemberSince", Account.CreatedAt.ToString(Account.DateFormat)]
    </MudText>

    <MudText Class="mb-3" Typo="Typo.h6">
        @L["Account:Details"]
    </MudText>

    <MudDivider Class="mb-3"/>

    @foreach (var item in _items)
    {
        <MudStack Class="mb-3" Row Spacing="1" AlignItems="AlignItems.Center">
            <MudText Class="text-bold" Typo="Typo.body2">
                @L[item.Name]:
            </MudText>
            <MudText Class="mud-text-secondary text-normal" Typo="Typo.body2">
                @item.Value
            </MudText>
            @if (item.Image is not null)
            {
                <MudImage Src="@item.Image" Width="26" Height="15"/>
            }
        </MudStack>
    }

    <MudStack Class="mt-6" Row Justify="Justify.Center">
        <MudButton OnClick="@OpenDialog" Variant="Variant.Filled" Color="Color.Primary" DisableElevation>
            @L["Account:Edit"]
        </MudButton>
    </MudStack>
</MudPaper>

@code {

    private Item[] _items = Array.Empty<Item>();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    [CascadingParameter]
    private AccountState Account { get; set; } = default!;

    [Parameter, EditorRequired]
    public Timezone[] Timezones { get; set; } = Array.Empty<Timezone>();

    [Parameter, EditorRequired]
    public Country[] Countries { get; set; } = Array.Empty<Country>();

    protected override void OnParametersSet()
    {
        var now = DateTime.Now;

        _items = new[]
        {
            new("Nickname", Account.Nickname),
            new("FirstName", Account.FirstName ?? "—"),
            new("LastName", Account.LastName ?? "—"),
            new("PreferredLanguage", StaticData.Languages.GetValueOrDefault(Account.Language, Account.Language)),
            GetCountryItem(Account.CountryCode),
            new("TimeZone", Timezones.FirstOrDefault(x => x.Id == Account.TimeZone)?.Name ?? Account.TimeZone),
            new("StartOfWeek", L[$"DayOfWeek:{Account.StartOfWeek}"]),
            new("DateFormat", $"{now.ToString(Account.DateFormat)} ({Account.DateFormat})"),
            new("TimeFormat", $"{now.ToString(Account.TimeFormat)} ({Account.TimeFormat})")
        };
    }

    private Item GetCountryItem(string? code)
    {
        if (string.IsNullOrEmpty(code))
            return new Item("Country", "—");

        var country = Countries.FirstOrDefault(x => x.Code == code);
        return country is null ? new Item("Country", "—") : new Item("Country", country.Name, country.Flag);
    }

    private void OpenDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            DisableBackdropClick = true,
            CloseButton = false,
            FullWidth = true,
            NoHeader = true,
            MaxWidth = MaxWidth.Medium
        };

        var parameters = new DialogParameters
        {
            [nameof(AccountEditorDialog.Countries)] = Countries,
            [nameof(AccountEditorDialog.Timezones)] = Timezones
        };

        DialogService.Show<AccountEditorDialog>(string.Empty, parameters, options);
    }

    private sealed record Item(string Name, string Value, string? Image = null);

}