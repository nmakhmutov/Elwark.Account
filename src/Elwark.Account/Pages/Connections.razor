@page "/connections"
@using Microsoft.AspNetCore.Authorization
@using Elwark.Account.Service.Profile.Models
@using Elwark.Account.Service.Profile
@using Elwark.Account.Service
@using Elwark.Account.Service.Profile.Requests
@using Microsoft.Extensions.Configuration
@using System.Net
@using Elwark.Account.States

@attribute [Authorize]

<MudButton Class="mb-3" Link="@_addLink" Variant="Variant.Filled" Color="Color.Primary">
    @L["Add"]
</MudButton>
<div class="grid">
    @foreach (var identity in Profile.Connections)
    {
        switch (identity)
        {
            case EmailConnection x:
                <EmailIdentityCard Email="@x" OnDelete="@OnDelete" OnConfirmation="@OnConfirmation" OnTypeChange="@OnTypeChanged"/>
                break;

            case SocialConnection x:
                <SocialIdentityCard Connection="@x" OnDelete="@OnDelete"/>
                break;
        }
    }
</div>

@code {

    [CascadingParameter]
    public Profile Profile { get; set; } = default!;

    [Inject]
    IDialogService DialogService { get; set; } = default!;

    [Inject]
    ProfileStateProvider Provider { get; set; } = default!;

    [Inject]
    IProfileClient Client { get; set; } = default!;

    [Inject]
    ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    IConfiguration Configuration { get; set; } = default!;

    [Inject]
    NavigationManager Navigation { get; set; } = default!;
    
    private string _addLink = string.Empty;

    protected override void OnInitialized()
    {
        var host = new Uri(Configuration["OpenIdConnect:Authority"]);
        var returnUrl = WebUtility.UrlEncode(Navigation.ToAbsoluteUri(Navigation.Uri).ToString());
        _addLink = new Uri(host, $"attach?returnUrl={returnUrl}").ToString();
    }

    private async Task OnDelete(Connection connection)
    {
        var result = await DialogService.ShowMessageBox(
            new MessageBoxOptions
            {
                Message = L["AreYouSureYouWantToDeleteYourConnection", connection.IdentityType.ToString().ToLowerInvariant(), connection.Value],
                Title = L["Warning"],
                YesText = L["Delete"],
                NoText = L["No"]
            });

        if (result != true)
            return;

        var profile = await Client.DeleteConnectionAsync(connection.IdentityType, connection.Value);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add("Something went wrong", Severity.Error);
                break;

            case ResponseStatus.Success:
                Provider.Update(profile.Data);
                Snackbar.Add(L["AccountUpdated"], Severity.Success);
                break;
        }
    }

    private async Task OnConfirmation(Connection connection)
    {
        var profile = await Client.ConfirmingConnectionAsync(connection.IdentityType, connection.Value);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add($"Something went wrong. {profile.Error.Title}", Severity.Error);
                break;

            case ResponseStatus.Success:
                Snackbar.Add($"Confirmation code sent to {connection.Value}", Severity.Success);
                DialogService.Show<IdentityConfirmationDialog>(
                    string.Empty,
                    new DialogParameters
                    {
                        [nameof(Connection)] = connection,
                        [nameof(Confirming)] = profile.Data
                    },
                    new DialogOptions
                    {
                        CloseButton = false,
                        NoHeader = true,
                        DisableBackdropClick = true,
                        FullWidth = true,
                        MaxWidth = MaxWidth.ExtraSmall
                    });
                break;
        }
    }

    private async Task OnTypeChanged(ChangeEmailType request)
    {
        var profile = await Client.ChangeEmailType(request);
        switch (profile.Status)
        {
            case ResponseStatus.Fail:
                Snackbar.Add($"Something went wrong. {profile.Error.Title}", Severity.Error);
                break;

            case ResponseStatus.Success:
                Provider.Update(profile.Data);
                Snackbar.Add(L["AccountUpdated"], Severity.Success);
                break;
        }
    }

}
