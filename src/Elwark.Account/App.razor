@using Elwark.Account.Services

<CascadingAuthenticationState>
    <CascadingAccountState>
        <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches>
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        <RedirectToLogin/>
                    </NotAuthorized>
                    <Authorizing>
                        <div class="d-flex justify-content-center app-loader flex-column">
                            <div class="spinner-border" role="status">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    </Authorizing>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAccountState>
</CascadingAuthenticationState>

@code{

    [Inject]
    private ThemeService ThemeService { get; set; } = default!;

    protected override Task OnInitializedAsync() => ThemeService.InitAsync();

}
