@using Elwark.Account.Service.Profile
@using Elwark.Account.Service
@using Elwark.Account.Service.Country
@using Elwark.Account.Service.Profile.Models
@using Elwark.Account.Service.Timezone
@using Elwark.Account.States
@implements IDisposable

<CascadingValue Value="Provider.State">
    @ChildContent
</CascadingValue>

@code {

    [Inject]
    private ICountryClient Country { get; set; } = default!;

    [Inject]
    private ITimezoneClient Timezone { get; set; } = default!;
    
    [Inject]
    private InfrastructureStateProvider Provider { get; set; } = default!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Provider.InfrastructureStateChanged += StateHasChanged;
        
        var countries = await Country.GetAsync();
        if(countries.Status == ResponseStatus.Success)
            Provider.Update(countries.Data);

        var timezones = await Timezone.GetAsync();
        if(timezones.Status == ResponseStatus.Success)
            Provider.Update(timezones.Data);
    }

    public void Dispose() =>
        Provider.InfrastructureStateChanged -= StateHasChanged;
}
