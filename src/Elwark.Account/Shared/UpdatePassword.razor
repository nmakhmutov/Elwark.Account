@using Elwark.Account.Service.Profile.Requests

<EditForm Model="@_model" OnValidSubmit="@OnSubmit">
    <FluentValidationValidator/>
    <MudTextField
        InputType="InputType.Password"
        Label="@L["OldPassword"]"
        @bind-Value="@_model.OldPassword"
        For="@(() => _model.OldPassword)"/>

    <MudTextField
        InputType="InputType.Password"
        Label="@L["NewPassword"]"
        @bind-Value="@_model.NewPassword"
        For="@(() => _model.NewPassword)"/>

    <MudTextField
        InputType="InputType.Password"
        Label="@L["ConfirmPassword"]"
        @bind-Value="@_model.ConfirmNewPassword"
        For="@(() => _model.ConfirmNewPassword)"/>

    <LoadingButton Text="@L["Update"]" IsLoading="@_isLoading" Class="mt-3"/>
</EditForm>

@code {
    
    private bool _isLoading;
    private UpdatePasswordRequest _model = new ();
    
    [Inject]
    IStringLocalizer<App> L { get; set; } = default!;
    
    [Parameter]
    public EventCallback<UpdatePasswordRequest> OnUpdatePassword { get; set; }

    private async Task OnSubmit(EditContext obj)
    {
        _isLoading = true;
        await OnUpdatePassword.InvokeAsync(_model);

        _model = new UpdatePasswordRequest();
        _isLoading = false;
    }

}
