@using Elwark.Account.Service.Profile
@using Elwark.Account.Service
@using Elwark.Account.Service.Profile.Models
@using Elwark.Account.States
@implements IDisposable

@switch (_profile.Status)
{
    case ResponseStatus.Loading:
        <div class="d-flex justify-content-center app-loader flex-column">
            <div class="spinner-border" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
        break;

    case ResponseStatus.Fail:
        <MudText Typo="Typo.h6" Align="Align.Center">
            @_profile.Error.Title
        </MudText>
        @ChildContent
        break;

    case ResponseStatus.Success:
        <CascadingValue Value="Provider.Profile">
            @ChildContent
        </CascadingValue>
        break;
}

@code {

    [Inject]
    private IProfileClient Client { get; set; } = default!;

    [Inject]
    private ProfileStateProvider Provider { get; set; } = default!;
    
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    private ApiResponse<Profile> _profile = ApiResponse<Profile>.Loading();

    protected override async Task OnInitializedAsync()
    {
        Provider.ProfileStateChanged += StateHasChanged;
        _profile = await Client.GetAsync();

        if (_profile.Status == ResponseStatus.Success)
            Provider.Update(_profile.Data);
    }

    public void Dispose() =>
        Provider.ProfileStateChanged -= StateHasChanged;

}
