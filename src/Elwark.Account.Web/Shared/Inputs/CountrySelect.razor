@using System.Globalization
@using Elwark.Storage.Client
@inject IElwarkStorageClient StorageClient;

@inherits InputSelect<string>

@if (_countries is null)
{
    <select @attributes="AdditionalAttributes">
        <option selected="selected" value="">Loading...</option>
    </select>
}
else
{
    <InputSelect Value="Value"
                 ValueChanged="@((string s) => ValueChanged.InvokeAsync(s))"
                 ValueExpression="ValueExpression"
                 AdditionalAttributes="AdditionalAttributes">
        <option value="">Choose...</option>
        @foreach (var (key, value) in _countries)
        {
            <option value="@key">
                @value
            </option>
        }
    </InputSelect>
}

@code {
    private static IReadOnlyDictionary<string, string>? _countries;

    protected override async Task OnInitializedAsync()
    {
        if (_countries is null)
        {
            var lang = CultureInfo.CurrentCulture.ThreeLetterWindowsLanguageName.ToUpper();
            var result = await StorageClient.Country.GetAllAsync();

            _countries = result
                .Select(x => new
                {
                    x.Alpha2Code,
                    Name = x.Translations.FirstOrDefault(t => t.Language == lang)
                           ?? x.Translations.FirstOrDefault()
                })
                .OrderBy(x => x.Name.Common)
                .ToDictionary(x => x.Alpha2Code, x => x.Name.Common);
        }
    }

}

