@using Elwark.Account.Shared.Identity
@using Elwark.Account.Web.Pages
@inject NavigationManager NavigationManager
@inject IdentitiesState State
@inject IStringLocalizer<Identities> L

<div class="container">
    <div class="row justify-content-between border-bottom">
        @foreach (var item in State.GetAttachLinks(NavigationManager.Uri))
        {
            <div class="col-4 pb-3">
                <a href="@item.Link" class="d-flex flex-column align-items-center text-decoration-none">
                    <IdentityIcon Type="@item.Type"/>
                    <span class="text-muted mt-2">@item.Type</span>
                </a>
            </div>
        }
    </div>

    <div class="row mt-5">
        <div class="col">
            <EditForm Model="_model" OnValidSubmit="@OnAddedEmail">
                <FluentValidator/>

                <div class="form-group">
                    <div class="input-group mb-3">
                        <InputText type="email" @bind-Value="_model.Email" class="form-control" placeholder="Email"/>
                        <div class="input-group-append">
                            <LoadingButton IsLoading="@_isCodeLoading" Title="@L["Add"]" Icon="fa-envelope" Type="submit"/>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => _model.Email)"/>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = null!;

    private bool _isCodeLoading;

    private readonly AddIdentityModel _model = new AddIdentityModel();

    private async Task OnAddedEmail()
    {
        _isCodeLoading = true;
        var result = await State.AddIdentityAsync(new Identification.Email(_model.Email!));

        _isCodeLoading = false;

        if (result)
        {
            await BlazoredModal.Close(ModalResult.Ok(true));
            return;
        }

        await BlazoredModal.Close(ModalResult.Cancel());
    }

}