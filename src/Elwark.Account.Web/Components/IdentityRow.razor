@using Elwark.Account.Shared.Identity

<div class="row bg-white py-3 mb-3 align-items-md-center justify-content-md-between">
    <div class="col-12 mb-3 col-md-auto mb-md-0">
        <div class="row align-items-center">
            <div class="col-auto">
                <IdentityIcon Type="@Item.Identification.Type"/>
            </div>

            <div class="col">
                @Item.Identification.Type
            </div>
        </div>
    </div>
    <div class="col-12 mb-3 col-md-5 mb-md-0 text-center">
        <h2 class="h5">
            <span>@Item.Identification.Value</span>
            @if (Item.IsConfirmed)
            {
                <i class="fas fa-check-circle text-success"></i>
            }
        </h2>
        <small class="text-muted d-block">Added @Item.CreatedAt.ToString("d")</small>
    </div>

    <div class="col-10 mb-3 col-md-3 mb-md-0">
        @if (Item.IsConfirmed)
        {
            if (Item.Notification is Notification.PrimaryEmail)
            {
                <h2 class="h5 font-weight-bold text-center">
                    Primary email
                </h2>
            }
            else if (Item.Identification is Identification.Email)
            {
                <div class="form-group">
                    <select class="form-control"
                            @onchange="@(e => OnChangeNotification.InvokeAsync(Enum.Parse<NotificationType>(e.Value.ToString())))"
                            disabled="@Item.IsLoading">

                        @foreach (var notification in IdentitiesState.NotificationTypes)
                        {
                            <option value="@notification" selected="@(Item.Notification.Type == notification)">
                                @IdentitiesState.GetNotificationTypeLabel(notification)
                            </option>
                        }

                    </select>
                </div>
            }
        }
        else
        {
            if (Item.IsConfirmationCodeSent)
            {
                <EditForm Model="ConfirmationModel" OnValidSubmit="@(() => OnConfirm.InvokeAsync(ConfirmationModel.Code.GetValueOrDefault(0)))">
                    <FluentValidator/>
                    <div class="form-group">
                        <div class="input-group mb-3">
                            <InputNumber @bind-Value="ConfirmationModel.Code" class="form-control" placeholder="Code"/>
                            <div class="input-group-append">
                                <LoadingButton IsLoading="@Item.IsLoading" Type="submit" Title="Confirm" Icon="fa-check"/>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => ConfirmationModel.Code)"/>
                    </div>
                </EditForm>
            }
            else
            {
                <LoadingButton
                    IsLoading="@Item.IsLoading"
                    Title="Confirm"
                    Icon="fa-check"
                    OnClick="@OnSendConfirmationCode"/>
            }
        }
    </div>

    <div class="col-2 col-md-auto mb-md-0">
        @if (Item.Notification.Type != NotificationType.PrimaryEmail)
        {
            <button class="btn" @onclick="@OnDelete" disabled="@Item.IsLoading">
                <i class="fas fa-trash"></i>
            </button>
        }
    </div>
</div>

@code
{
    private ConfirmIdentityModel ConfirmationModel { get; set; } = new ConfirmIdentityModel();

    [Parameter] public IdentityModel Item { get; set; }

    [Parameter] public EventCallback<NotificationType> OnChangeNotification { get; set; }

    [Parameter] public EventCallback OnSendConfirmationCode { get; set; }

    [Parameter] public EventCallback OnDelete { get; set; }

    [Parameter] public EventCallback<long> OnConfirm { get; set; }
}