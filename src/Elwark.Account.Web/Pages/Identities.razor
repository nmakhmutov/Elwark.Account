@page "/identities"
@using Elwark.Account.Web.Models
@inject IModalService ModalWindow
@inject IdentitiesState State
@inject IStringLocalizer<Identities> L

@attribute [Authorize]

@if (State.Identities.Count == 0)
{
    <PageLoading/>
}
else
{
    <div class="container">
        <PageHeader Title="@L["Identities"]" Subtitle="@L["Manage your identities which allow you log in to your account."]">
            <HeaderAside>
                <button @onclick="@OpenAddIdentityDialog" class="btn btn-outline-success">
                    <i class="fas fa-plus"></i>
                    @L["Add"]
                </button>
            </HeaderAside>
        </PageHeader>

        <div class="row mb-3 justify-content-between">

            <div class="col-auto">
                <div class="form-group row">
                    <label for="sort" class="col-auto col-form-label">@L["Sort"]</label>
                    <div class="col-auto">
                        <select @bind="State.Sorting" id="sort" class="form-control">
                            <option value="@IdentitySorting.None">@L["None"]</option>
                            <option value="@IdentitySorting.AddedAsc">@L["AddedAsc"]</option>
                            <option value="@IdentitySorting.AddedDesc">@L["AddedDesc"]</option>
                            <option value="@IdentitySorting.TypeAsc">@L["TypeAsc"]</option>
                            <option value="@IdentitySorting.TypeDesc">@L["TypeDesc"]</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="col-auto">
                <div class="btn-toolbar float-right">
                    <div class="btn-group">
                        <button type="button"
                                @onclick="@(e => State.View = ViewType.List)"
                                class="btn @GetViewButtonClasses(ViewType.List)">
                            <i class="fas fa-list"></i>
                        </button>
                        <button type="button"
                                @onclick="@(e => State.View = ViewType.Grid)"
                                class="btn @GetViewButtonClasses(ViewType.Grid)">
                            <i class="fas fa-th"></i>
                        </button>
                    </div>
                </div>
            </div>

        </div>


        @switch (State.View)
        {
            case ViewType.List:
                foreach (var item in State.Identities)
                {
                    <IdentityRow
                        Item="@item"
                        OnChangeNotification="@(type => State.ChangeNotificationTypeAsync(item, type))"
                        OnSendConfirmationCode="@(() => State.SendConfirmationCodeAsync(item))"
                        OnDelete="@(() => State.DeleteAsync(item))"
                        OnConfirm="@(code => State.ConfirmAsync(item, code))"/>
                }
                break;

            case ViewType.Grid:
                <div class="row">
                    @foreach (var item in State.Identities)
                    {
                        <div class="col-12 col-sm-6 col-md-4">
                            <IdentityCard
                                Item="@item"
                                OnChangeNotification="@(type => State.ChangeNotificationTypeAsync(item, type))"
                                OnSendConfirmationCode="@(() => State.SendConfirmationCodeAsync(item))"
                                OnDelete="@(() => State.DeleteAsync(item))"
                                OnConfirm="@(code => State.ConfirmAsync(item, code))"/>
                        </div>
                    }
                </div>
                break;
        }
    </div>
}

@code {

    protected override Task OnInitializedAsync() =>
        State.InitializeAsync();

    private async Task OpenAddIdentityDialog()
    {
        var modal = ModalWindow.Show<AddIdentityModal>(L["Add identity"], new ModalOptions
        {
            Position = ModalPosition.Center
        });

        await modal.Result;
    }

    private string GetViewButtonClasses(ViewType viewType) =>
        viewType == State.View ? "btn-primary" : "btn-secondary";

}