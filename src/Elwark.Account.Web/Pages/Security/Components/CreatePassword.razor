@using Elwark.Account.Shared.PasswordService.Model
<EditForm Model="@_model" OnValidSubmit="@HandleSubmit" class="card">
    <FluentValidator/>
    <div class="card-body">

        <div class="form-group">
            <label>New password</label>
            <InputText type="password" @bind-Value="_model.Password" class="form-control" placeholder="New password"/>
            <ValidationMessage For="@(() => _model.Password)"/>
        </div>

        <div class="form-group">
            <label>Confirm new password</label>
            <InputText type="password" @bind-Value="_model.Confirmation" class="form-control" placeholder="Confirm new password"/>
            <ValidationMessage For="@(() => _model.Confirmation)"/>
        </div>

        <div class="form-group">
            <label>Confirmation code</label>
            <div class="input-group mb-3">
                <InputNumber @bind-Value="_model.Code" class="form-control" placeholder="Confirmation code"/>
                <div class="input-group-append">
                    <LoadingButton IsLoading="@_isCodeLoading" Title="Request code" Icon="fa-qrcode" OnClick="@HandleCodeSubmit"/>
                </div>
            </div>
            <ValidationMessage For="@(() => _model.Code)"/>
        </div>

        <div class="row">
            <div class="col-auto">
                <LoadingButton IsLoading="@_isLoading" Type="submit" Title="Create password" Icon="fa-shield-alt"/>
            </div>
        </div>

    </div>
</EditForm>

@code {
    private bool _isLoading;
    private bool _isCodeLoading;
    private readonly CreatePasswordModel _model = new CreatePasswordModel();

    [Parameter]
    public EventCallback OnRequestCodeSubmit { get; set; }

    [Parameter]
    public EventCallback<CreatePasswordModel> OnValidSubmit { get; set; }

    private async Task HandleSubmit()
    {
        _isLoading = true;
        await OnValidSubmit.InvokeAsync(_model);
        _isLoading = false;
    }

    private async Task HandleCodeSubmit()
    {
        _isCodeLoading = true;
        await OnRequestCodeSubmit.InvokeAsync(null);
        _isCodeLoading = false;
    }

}