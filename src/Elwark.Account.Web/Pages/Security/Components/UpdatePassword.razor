@using Elwark.Account.Web.Services.PasswordService.Model
<EditForm Model="@_model" OnValidSubmit="@HandleSubmit" class="card">
    <FluentValidator/>
    <div class="card-body">
        <div class="form-group">
            <label>Current password</label>
            <InputText type="password" @bind-Value="_model.Current" class="form-control" placeholder="Current password"/>
            <ValidationMessage For="@(() => _model.Current)"/>
        </div>

        <div class="form-group">
            <label>New password</label>
            <InputText type="password" @bind-Value="_model.Password" class="form-control" placeholder="New password"/>
            <ValidationMessage For="@(() => _model.Password)"/>
        </div>

        <div class="form-group">
            <label>Confirm new password</label>
            <InputText type="password" @bind-Value="_model.Confirmation" class="form-control" placeholder="Confirm new password"/>
            <ValidationMessage For="@(() => _model.Confirmation)"/>
        </div>

        <div class="row">
            <div class="col-auto">
                <LoadingButton IsLoading="@_isLoading" Type="submit" Title="Update password" Icon="fa-shield-alt"/>
            </div>
        </div>

    </div>
</EditForm>

@code {
    private bool _isLoading;
    private readonly UpdatePasswordModel _model = new UpdatePasswordModel();

    [Parameter]
    public EventCallback<UpdatePasswordModel> OnValidSubmit { get; set; }

    private async Task HandleSubmit()
    {
        _isLoading = true;
        await OnValidSubmit.InvokeAsync(_model);
        _isLoading = false;
    }

}