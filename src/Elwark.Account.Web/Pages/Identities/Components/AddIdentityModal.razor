@using Microsoft.Extensions.Configuration
@using Elwark.Account.Web.Pages.Identities.Components.Models
@using Elwark.People.Abstractions
@using Elwark.Account.Shared.IdentityService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IIdentityService IdentityService
@inject IToaster Toaster

<div class="container">
    <div class="row justify-content-between border-bottom">
        @foreach (var item in Identifiers)
        {
            <div class="col-4 pb-3">
                <a href="@AttachLink(item)" class="d-flex flex-column align-items-center text-decoration-none">
                    <IdentityIcon Type="@item"/>
                    <span class="text-muted mt-2">@item</span>
                </a>
            </div>
        }
    </div>

    <div class="row mt-5">
        <div class="col">
            <EditForm Model="_model" OnValidSubmit="@OnAddedEmail">
                <FluentValidator/>

                <div class="form-group">
                    <div class="input-group mb-3">
                        <InputText type="email" @bind-Value="_model.Email" class="form-control" placeholder="Email"/>
                        <div class="input-group-append">
                            <LoadingButton IsLoading="@_isCodeLoading" Title="Add email" Icon="fa-envelope" Type="submit"/>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => _model.Email)"/>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = null!;

    private static readonly IdentificationType[] Identifiers =
    {
        IdentificationType.Google,
        IdentificationType.Facebook,
        IdentificationType.Microsoft
    };

    private bool _isCodeLoading;

    private readonly EmailIdentityInputModel _model = new EmailIdentityInputModel();

    private Uri AttachLink(IdentificationType type)
    {
        var host = new Uri(Configuration["Urls:IdentitySite"]);
        return new Uri(host, $"/attach/provider/{type}?returnUrl={NavigationManager.Uri}");
    }

    private async Task OnAddedEmail()
    {
        _isCodeLoading = true;

        var result = await IdentityService.AddAsync(new Identification.Email(_model.Email));

        _isCodeLoading = false;

        if (result.IsSuccess)
        {
            Toaster.Success("Email has been added");
            await BlazoredModal.Close(ModalResult.Ok(true));
            return;
        }

        Toaster.Error(result.Error?.Detail);
        await BlazoredModal.Close(ModalResult.Cancel());
    }

}