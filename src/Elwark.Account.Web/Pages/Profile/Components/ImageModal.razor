@using Elwark.Account.Web.State
@using Elwark.Account.Shared.AccountService
@inject IAccountService AccountService
@inject IToaster Toaster
@inject AccountStateProvider AccountStateProvider

<div class="container">
    <div class="row justify-content-center align-items-center mb-2">
        <div class="col-12">
            <div class="avatar-edit mx-auto mb-2">
                <img src="@Image" alt="Profile picture">
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <EditForm Model="_model" OnValidSubmit="@OnChangeImage">
                <FluentValidator/>

                <div class="form-group">
                    <div class="input-group mb-3">
                        <InputText type="text" @bind-Value="_model.Picture" class="form-control" placeholder="e.g. https://image.store/profile.png"/>
                        <div class="input-group-append">
                            <LoadingButton IsLoading="@_isLoading" Title="Save" Icon="fa-image" Type="submit"/>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => _model.Picture)"/>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {

    private bool _isLoading;
    private PictureInputModel _model = new PictureInputModel();

    private string Image => string.IsNullOrWhiteSpace(_model.Picture)
        ? Picture
        : _model.Picture;

    [CascadingParameter] 
    private BlazoredModalInstance BlazoredModal { get; set; } = null!;

    [Parameter] 
    public string Picture { get; set; } = null!;

    private async Task OnChangeImage()
    {
        _isLoading = true;

        var result = await AccountService.UpdatePictureAsync(new Uri(_model.Picture));

        if (result.IsSuccess)
        {
            var account = AccountStateProvider.Account;
            account!.Picture = _model.Picture;
            AccountStateProvider.Update(account);

            await BlazoredModal.Close(ModalResult.Ok(true));
        }
        else
        {
            Toaster.Error(result.Error?.Detail);
        }

        _isLoading = false;
    }

}